// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package projet_oop;

import java.util.ArrayList;
import java.util.List;

import projet_oop.Dish;

/************************************************************/
/**
 * Meal creates objects representing a either a halfMeal or a FullMeal
 * Meal is being inherited by halfMeal and FullMeal
 * 
 * @author Patrick 
 */
public abstract class Meal {
	
	private String name;
	private List<Dish> listOfDish;
	private String type;
	

	/**
	 * @param name = name of the meal f.e. "Lucky Luke" 
	 * 
	 * the constructor is protected so that a class of type Dish can not be created from the outside but only by its subclasses
	 */
	protected Meal(String name) {
		this.name = name;
		listOfDish = new ArrayList<Dish>();
	}
	
	
	/************************************************************
	 * Getters and Setters 
	 */
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public List<Dish> getListOfDish() {
		return listOfDish;
	}

	public void setListOfDish(List<Dish> listOfDish) {
		this.listOfDish = listOfDish;
	}
	
	/************************************************************/
	
	/**
	 * @return returns the price of the meal (adds up the prices of all its elements)
	 */
	public int getPrice() {
		
		//TODO complete function
		
		return 0;
	}

	@Override
	public String toString() {
		return "Meal [name=" + name + ", listOfDish=" + listOfDish + ", type=" + type + "]";
	}
	
	
	
	
};
